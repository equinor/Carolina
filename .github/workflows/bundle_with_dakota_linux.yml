name: linux-run-tests-build-docs

on:
  workflow_call:
    secrets:
      DEPENDENCY_ACCESS_TOKEN:
        required: true

    inputs:
      ERT_SHOW_BACKTRACE:
        required: true
        type: string
      NO_PROJECT_RES:
        required: true
        type: string
      BOOST_VERSION:
        required: true
        type: string
      DAKOTA_VERSION:
        required: true
        type: string
      INSTALL_DIR:
        required: true
        type: string

jobs:
  build_wheels:
    name: Build ðŸ›ž
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.11' ]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      ERT_SHOW_BACKTRACE: ${{ inputs.ERT_SHOW_BACKTRACE }}
      NO_PROJECT_RES: ${{ inputs.NO_PROJECT_RES }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/cache@v4
      id: cache-package-check
      with:
        key: carolina_deps_${{ matrix.os }}_python-${{ matrix.python-version }}_boost-${{ inputs.BOOST_VERSION }}_dakota-${{ inputs.DAKOTA_VERSION }}
        path: ./deps_build

    - name: Build Boost & Dakota
      if: steps.cache-package-check.outputs.cache-hit != 'true'
      uses: docker://quay.io/pypa/manylinux2014_x86_64
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        BOOST_VERSION: ${{ inputs.BOOST_VERSION }}
        DAKOTA_VERSION: ${{ inputs.DAKOTA_VERSION }}
      with:
        entrypoint: /bin/bash
        args: '-c "sh dakota_manylinux_install_files/build_deps_gha.sh ${{ matrix.python-version }}"'

    - uses: actions/cache/save@v4
      if: steps.cache-package-check.outputs.cache-hit != 'true'
      id: cache-package-store
      with:
        key: carolina_deps_${{ matrix.os }}_python-${{ matrix.python-version }}_boost-${{ inputs.BOOST_VERSION }}_dakota-${{ inputs.DAKOTA_VERSION }}
        path: ./deps_build

    - name: Build Linux Wheel
      uses: docker://quay.io/pypa/manylinux2014_x86_64
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        BOOST_VERSION: ${{ inputs.BOOST_VERSION }}
        DAKOTA_VERSION: ${{ inputs.DAKOTA_VERSION }}
      with:
        entrypoint: /bin/bash
        args: '-c "sh dakota_manylinux_install_files/build_wheels_gha.sh ${{ matrix.python-version }}"'

    - name: Checkout Carolina
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: carolina-main

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up python venv
      run: python -m venv othervenv

    - name: Install Carolina from wheel
      run: |
        source othervenv/bin/activate
        pyver_nodot=$(echo ${{ matrix.python-version }} | sed 's/\.//g')
        wheel_path=$(find carolina_dist -name "carolina*$pyver_nodot*whl")
        echo "Found Carolina wheel at $wheel_path"
        pip install $wheel_path

    - name: Test Carolina
      run: |
        source othervenv/bin/activate
        pip install pytest
        cd carolina-main/tests
        python -m pytest .
        cd -

    - name: Upload wheel as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }} Python ${{ matrix.python-version }} wheel
        path: |
          carolina_dist/*
          trace/*
